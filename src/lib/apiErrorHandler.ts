import { toast } from '@/hooks/use-toast';

export function handleApiError(error: any, context?: string) {
  // Log seguro (NUNCA incluir tokens, credenciales, o respuestas completas)
  const errorInfo = {
    context: context || 'API',
    type: error.name || 'Unknown',
    message: error.message || 'Unknown error',
    timestamp: new Date().toISOString()
  };

  console.error('[API Error]', errorInfo);

  // Detectar tipo de error y mostrar mensaje apropiado

  // 1. Rate Limiting
  if (error.message.startsWith('RATE_LIMIT:')) {
    const seconds = error.message.split(':')[1];
    const minutes = Math.ceil(parseInt(seconds) / 60);

    toast({
      title: "‚è≥ Demasiadas peticiones",
      description: `Has alcanzado el l√≠mite de peticiones. Por favor espera ${minutes} minuto${minutes > 1 ? 's' : ''} antes de volver a intentar.`,
      variant: "destructive",
      duration: 5000
    });
    return;
  }

  // 2. Timeout
  if (error.name === 'AbortError') {
    toast({
      title: "‚è±Ô∏è Tiempo de espera agotado",
      description: "La operaci√≥n tard√≥ demasiado tiempo. Por favor, intenta de nuevo.",
      variant: "destructive",
      duration: 5000
    });
    return;
  }

  // 3. Sin sesi√≥n
  if (error.message === 'NO_SESSION') {
    toast({
      title: "üîí Sesi√≥n expirada",
      description: "Tu sesi√≥n ha expirado. Por favor, inicia sesi√≥n de nuevo.",
      variant: "destructive",
      duration: 5000
    });
    // Opcional: redirigir a login despu√©s de 2 segundos
    setTimeout(() => {
      window.location.href = '/login';
    }, 2000);
    return;
  }

  // 4. Errores HTTP espec√≠ficos
  if (error.message.startsWith('HTTP_')) {
    const [, statusCode, message] = error.message.match(/HTTP_(\d+):(.*)/) || [];

    switch (statusCode) {
      case '401':
      case '403':
        toast({
          title: "üö´ Acceso denegado",
          description: "No tienes permisos para realizar esta acci√≥n.",
          variant: "destructive",
          duration: 5000
        });
        break;

      case '404':
        toast({
          title: "üîç No encontrado",
          description: `No se encontr√≥ el recurso solicitado${context ? ` en ${context}` : ''}.`,
          variant: "destructive",
          duration: 5000
        });
        break;

      case '500':
      case '502':
      case '503':
        toast({
          title: "‚ö†Ô∏è Error del servidor",
          description: "El servidor est√° teniendo problemas. Por favor, intenta m√°s tarde.",
          variant: "destructive",
          duration: 5000
        });
        break;

      default:
        toast({
          title: "‚ùå Error inesperado",
          description: "Ocurri√≥ un error inesperado. Por favor, intenta de nuevo.",
          variant: "destructive",
          duration: 5000
        });
    }
    return;
  }

  // 5. Error gen√©rico (fallback)
  toast({
    title: "‚ùå Error del servidor",
    description: `No se pudo completar la operaci√≥n${context ? ` en ${context}` : ''}. Por favor, intenta m√°s tarde.`,
    variant: "destructive",
    duration: 5000
  });
}
